From 528c6b095c3039284345bdbd4ccceff4ccb744b2 Mon Sep 17 00:00:00 2001
From: Randall Gray <Randall.Gray@csiro.au>
Date: Sun, 8 Sep 2013 14:39:35 +1000
Subject: [PATCH] Fixed inappropriate Free associated with wordexp(), Fixed
 realloc problem in read-all (not that it works yet)

---
 igor.c | 78 ++++++++++++++++++++++++++++++++++++++++--------------------------
 1 file changed, 47 insertions(+), 31 deletions(-)

diff --git a/igor.c b/igor.c
index aa95d3d..90a33f1 100644
--- a/igor.c
+++ b/igor.c
@@ -1,4 +1,4 @@
-// -*- outline-regexp: "/\\*-+";  -*-
+// -*- outline-regetxp: "/\\*-+";  -*-
 /*-  Identification and Changes  */
 
 /*
@@ -75,6 +75,11 @@
 #define NewEvaluateSchemeExpression // comment out for the old version
 
 
+//#define reallocate(p,s) realloc(p, s)
+#define reallocate(p,s) ({void *q = NULL; fprintf(stderr,"REALLOC %s:%d\n",__FUNCTION__, __LINE__); fflush(stderr); q =  realloc(p, s); fprintf(stderr,"REALLOCATED %s:%d\n",__FUNCTION__, __LINE__); fflush(stderr); q;})
+
+
+
 //#define Cprintf(format, args...) printf(format, ##args) // execution in command-loop
 //#define Iprintf(format, args...) printf(format, ##args) // execution path from the arguments supplied to igor
 //#define Dprintf(format, args...) printf(format, ##args) // debugging the tokenising
@@ -325,6 +330,7 @@ typedef struct CMD_T {
 	int in, out, err;
 	int output_to_sexp;
 	int input_from_sexp;
+	char *inputstring;
 	int shuto, shute;
 	int bg;
 	struct CMD_T *next;
@@ -345,19 +351,24 @@ int Close(int fd) {
 
 char *read_all(int fd) {
 	char *inputstring = NULL;
-	int i = 0,n = 0, k = 0; // i is the the string length, n is amount read, k is the size of the buffer
+	int i = 0, n = 0, k = 0; // i is the the string length, n is amount read, k is the size of the buffer
 	
+	if (fd < 0) return NULL;
+
 	inputstring = (char *)malloc(1024);
 	if (inputstring) k += 1024;
 	else return NULL;
 		
 	*inputstring = 0;
 
-	for (n = read(fd, inputstring + k, 1023); n > 0; n = read(fd, inputstring + k, 1023)) {
+	i = n = 0;
+	for (n = read(fd, inputstring + i, 1023); n > 0; n = read(fd, inputstring + i, 1023)) {
 		i += n;
 		inputstring[i] = 0;
-		inputstring = (char *)realloc(inputstring, k+1024);
-		if (inputstring) k += 1024;
+// THIS DIES
+
+		inputstring = (char *)reallocate(inputstring, i+1024);
+		if (inputstring) k = i+1024;
 		else {
 			fprintf(stderr,"Unable to allocate memory for builtin input pipe!\n");
 			return NULL;
@@ -453,7 +464,7 @@ void add_magic(char *str) {
 		for (i = 0; i < n_magic_strings && strcmp(magic_string[i], str); i++);
 
 		if (i >= n_magic_strings) {
-			magic_string = (char **)realloc(magic_string, (n_magic_strings+2)*sizeof(char *));
+			magic_string = (char **)reallocate(magic_string, (n_magic_strings+2)*sizeof(char *));
 			magic_string[n_magic_strings++] = strdup(str);
 			magic_string[n_magic_strings] = 0;
 		}
@@ -593,7 +604,6 @@ char *read_line(FILE *f, char *prompt_function) {
 	static int n1 = 85, n2 = 171;
 	static int k = -1;
 
-	
 	if (!f && !running_script) {
 		//char *prompt = strdup("Thur? ");
 #if defined(NewEvaluateSchemeExpression)
@@ -672,7 +682,9 @@ char *read_line(FILE *f, char *prompt_function) {
 		for (n = strlen(linebuffer); !feof(f) && (*linebuffer == 0 || linebuffer[n-1] != '\n'); n = strlen(linebuffer)) {
 			if (k - n < n1) {
 				int t;
-				linebuffer = (char *)realloc(linebuffer, k+n2);
+
+				linebuffer = (char *)reallocate(linebuffer, k+n2);
+
 				if (!linebuffer) Abort("Out of memory");
 				t = k+n2;
 				n1 = n2;
@@ -712,7 +724,7 @@ char *excise_string(char *s, char *p, int n) {
 char *insert_string(int n, char *s, char *p, char *insertion) {
 	char *tmp;
 	if (p < s) abort();
-	if (strlen(s) + strlen(insertion) + 1  > n) s = (char *)realloc(s, strlen(s) + strlen(insertion) + 1);
+	if (strlen(s) + strlen(insertion) + 1  > n) s = (char *)reallocate(s, strlen(s) + strlen(insertion) + 1);
 
 	tmp = strdup(p);
 	strcpy(p, insertion);
@@ -955,7 +967,7 @@ char *word_expand_string(char *s) {
 		n += strlen(arg.we_wordv[i]);
 	}
 	
-	r = malloc((n + i)*sizeof(char));
+	r = malloc(1 + (n + i)*sizeof(char));
 	*r = 0;
 	for (k = 0; k < i; k++) {
 		if (k && k+1 < i) strcat(r," ");
@@ -1281,7 +1293,8 @@ char *sexpr_depth(char *buffer, char *str) {
 
 	if (!str) abort();
 
-	buffer = (char *) realloc(buffer, strlen(str) + 3);
+	
+	buffer = (char *) reallocate(buffer, strlen(str) + 3);
 	memset(buffer, 0, (strlen(str) + 3)*sizeof(char));
 
 	for (p = str; *p;) {
@@ -1379,18 +1392,19 @@ char **tokenise_cmdline(char *cmdline) {
 		if (!cp || !*cp) { // either there is nothing there, or we have reached the end of the cmdline
 			if (i > 0) { // we are still collecting a string, so
 				// add another bit to the token array
-				argv = (char **)realloc(argv, (argc + 2)*sizeof(char **));
+				argv = (char **)reallocate(argv, (argc + 2)*sizeof(char **));
 				argv[argc] = strdup(collecting);
 				*collecting = 0;
 				argc++;
 				argv[argc] = 0;
 			}
 			else { // we *aren't* collecting, so just add the terminating null
-				argv = (char **)realloc(argv, (argc + 1)*sizeof(char **));
+				argv = (char **)reallocate(argv, (argc + 1)*sizeof(char **));
 				argv[argc] = 0;
 			}
 
 			Free(collecting);
+
 			return argv;
 		}
 
@@ -1402,7 +1416,7 @@ char **tokenise_cmdline(char *cmdline) {
 		else if (cp != collecting && isspace(*cp)) {
 			// We have reached a gap between arguments
 			i = 0;
-			argv = (char **)realloc(argv, (argc + 2)*sizeof(char **));
+			argv = (char **)reallocate(argv, (argc + 2)*sizeof(char **));
 			argv[argc++] = strdup(collecting);
 			argv[argc] = 0; // for safety's sake
 			cp++;
@@ -1418,7 +1432,7 @@ char **tokenise_cmdline(char *cmdline) {
 			char *tcp = jump_sexp(cp+1, sescape);
 			int n = collecting?strlen(collecting):1;
 
-			if (!collecting || n+tcp-cp > CSIZE) collecting = (char *)realloc(collecting, (n+tcp-cp + CSIZE)*sizeof(char));
+			if (!collecting || n+tcp-cp > CSIZE) collecting = (char *)reallocate(collecting, (n+tcp-cp + CSIZE)*sizeof(char));
 			strncpy(collecting+i, cp, tcp - cp);
 			collecting[i+tcp - cp] = 0;
 
@@ -1455,7 +1469,7 @@ char **tokenise_cmdline(char *cmdline) {
 			char *tcp = jump_sexp(cp, sescape); 
 			int n = collecting?strlen(collecting):1;
 
-			if (!collecting || n+tcp-cp > CSIZE) collecting = (char *)realloc(collecting, (n+tcp-cp + CSIZE)*sizeof(char));
+			if (!collecting || n+tcp-cp > CSIZE) collecting = (char *)reallocate(collecting, (n+tcp-cp + CSIZE)*sizeof(char));
 			strncpy(collecting+i, cp, tcp - cp);
 			collecting[i+tcp - cp] = 0;
 
@@ -1476,10 +1490,10 @@ char **tokenise_cmdline(char *cmdline) {
 			else { // this is a special symbol like | or >> ... tokenise it separately
 				if (i > 0) {
 					// finish the last token
-					argv = (char **)realloc(argv, (argc + 3)*sizeof(char **));
+					argv = (char **)reallocate(argv, (argc + 3)*sizeof(char **));
 					argv[argc++] = strdup(collecting);
 				}
-				else argv = (char **)realloc(argv, (argc + 2)*sizeof(char **));
+				else argv = (char **)reallocate(argv, (argc + 2)*sizeof(char **));
 
 
 				if ((*ims == *scmunquote)) { // we have one of the unquoting rules
@@ -1568,9 +1582,11 @@ char *handle_filename(char *s) {
 		}
 	}
 	else {
+
 		n = wordexp(s, &arg, 0);
 		
 		if (n != 0) {
+			// We need to tease this out a bit
 			t = strdup(s);
 		}
 		else {
@@ -1605,23 +1621,23 @@ char **word_expansion(char **argv, int *argc, int argix) {
 
 	if (err) return NULL;
 
-	n = arg.we_wordc + *argc;
+	n = arg.we_wordc + *argc + 1;
 	
 	if (arg.we_wordc == 0) {
 		int j;
-		char *s = argv[argix];
+		//char *s = argv[argix];
 		for (j = argix; j < *argc; j++) argv[j] = argv[j+1];
 		*argc = *argc-1;
-		Free(s); // I hope this is ok!
+		//Free(s); // I hope this is ok! .. maybe not?
 	}
 	else if (arg.we_wordc == 1) {
 		int sn = strlen(arg.we_wordv[0]);
-		if (strlen(argv[argix]) < sn) argv[argix] = (char *)realloc(argv[argix], (sn+2) * sizeof(char));
+		if (strlen(argv[argix]) < sn) argv[argix] = (char *)reallocate(argv[argix], (sn+2) * sizeof(char));
 		strcpy(argv[argix], arg.we_wordv[0]);
 	}
 	else {
 		int i;
-		argv = (char **)realloc(argv,sizeof(char **) * (n+1));
+		argv = (char **)reallocate(argv,sizeof(char **) * (n+1));
 		for (i = *argc; i <= n; i++) argv[i] = 0;
 		if (!argv) abort();
 
@@ -1632,7 +1648,7 @@ char **word_expansion(char **argv, int *argc, int argix) {
 			
 			argv[i+argix] = strdup(arg.we_wordv[i]);
 
-			//argv[i+argix] = (char *)realloc(argv[i+argix], (strlen(arg.we_wordv[i])+1) * sizeof(char));
+			//argv[i+argix] = (char *)reallocate(argv[i+argix], (strlen(arg.we_wordv[i])+1) * sizeof(char));
 			//strcpy(argv[i+argix], arg.we_wordv[i]);
 		}
 
@@ -2432,7 +2448,7 @@ char *get_commandline(FILE *f, char *buffer) {
 		}
 		else {
 			ctrld = 0;
-			buffer = (char *)realloc(buffer, strlen(buffer) + strlen(cl) + 1);
+			buffer = (char *)reallocate(buffer, strlen(buffer) + strlen(cl) + 1);
 			strcat(buffer, cl);
 			Free(cl);
 			cl = 0;
@@ -2995,7 +3011,7 @@ sexp scm_func(char **argv, int in, int out, char *inputstring) {
 	// Stick all the s-expressions in one spot
 	for (Sexp = argv; *Sexp; Sexp++) {
 		k += strlen(*Sexp);
-		sline = (char *)realloc(sline, (strlen(sline) + strlen(*Sexp) + k + 3) * sizeof(char));
+		sline = (char *)reallocate(sline, (strlen(sline) + strlen(*Sexp) + k + 3) * sizeof(char));
 		
 		if (Sexp != argv) strcat(sline, " "); // insert a space if it isn't the first one
 		strcat(sline,*Sexp);
@@ -3045,11 +3061,11 @@ sexp scm_func(char **argv, int in, int out, char *inputstring) {
 				int nq = strlen(q);
 				write(out,q,nq);
 				if (!r) {
-					r = (char *)realloc(r,(nq + 1)*sizeof(char));
+					r = (char *)reallocate(r,(nq + 1)*sizeof(char));
 					strcpy(r,q);
 				}
 				else {
-					r = (char *)realloc(r,(strlen(r) + nq + 1)*sizeof(char));
+					r = (char *)reallocate(r,(strlen(r) + nq + 1)*sizeof(char));
 					strcat(r, q);
 				}
 
@@ -3118,7 +3134,7 @@ int scm_func_XXX(char **argv, int in, int out) {
 	// Stick all the s-expressions in one spot
 	for (Sexp = argv; *Sexp; Sexp++) {
 		k += strlen(*Sexp);
-		sline = (char *)realloc(sline, (strlen(sline) + strlen(*Sexp) + k + 3) * sizeof(char));
+		sline = (char *)reallocate(sline, (strlen(sline) + strlen(*Sexp) + k + 3) * sizeof(char));
 		
 		if (Sexp != argv) strcat(sline, " "); // insert a space if it isn't the first one
 		strcat(sline,*Sexp);
@@ -3168,11 +3184,11 @@ int scm_func_XXX(char **argv, int in, int out) {
 				int nq = strlen(q);
 				write(out,q,nq);
 				if (!r) {
-					r = (char *)realloc(r,(nq + 1)*sizeof(char));
+					r = (char *)reallocate(r,(nq + 1)*sizeof(char));
 					strcpy(r,q);
 				}
 				else {
-					r = (char *)realloc(r,(strlen(r) + nq + 1)*sizeof(char));
+					r = (char *)reallocate(r,(strlen(r) + nq + 1)*sizeof(char));
 					strcat(r, q);
 				}
 
-- 
1.8.4

